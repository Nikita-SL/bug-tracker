pipeline {
    agent any

    stages {
        stage('Execute Unit tests') {
            parallel {
                stage('Unit tests - Backend') {
                    agent {
                        docker {
                            image 'snakee/golang-junit:1.21'
                            reuseNode true
                        }
                    }
                    environment {
                        GOCACHE = '/tmp/go-cache'
                        GOPATH = '/tmp/go-path'
                    }
                    steps {
                        dir('bugtracker-backend') {
                            sh '''
                                GOCACHE=/tmp/go-cache go test -v ./... 2>&1 | go-junit-report > test-results.xml

                                # Generate coverage report
                                go test "-coverprofile=coverage.out" -covermode=atomic ./...
                                go tool cover "-html=coverage.out" -o coverage.html

                                mkdir -p reports
                                mv coverage.html reports/
                            
                            '''
                        }
                    }
                    post {
                        always {
                            junit 'bugtracker-backend/test-results.xml'
                            publishHTML target: [
                                reportDir: 'bugtracker-backend/reports',
                                reportFiles: 'coverage.html',
                                reportName: 'BE Coverage Report'
                            ]
                        }
                    }
                }

                stage('Unit Tests  - FE') {
                    agent {
                        docker {
                            image 'node:20'
                            reuseNode true
                        }
                    }
                    steps {
                        dir('bugtracker-frontend') {
                            sh '''
                            npm ci
                            npm test  
                            mkdir -p reports
                            mv coverage reports/
                            '''
                        }
                    }
                    post {
                        always {
                            junit 'bugtracker-frontend/test-results.xml'
                            publishHTML target: [
                                reportDir: 'bugtracker-frontend/reports/coverage',
                                reportFiles: 'index.html',
                                reportName: 'FE Coverage Report'
                            ]
                        }
                    }
                }  
            }
        }
        

        
    }
    post {
        always {
            cleanWs()
        }
    }
}
